// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.Entities;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(ODTutorContext))]
    [Migration("20240506054037_WalletTransactionId")]
    partial class WalletTransactionId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoursePromotionPromotion", b =>
                {
                    b.Property<Guid>("CoursePromotionsNavigationsPromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PromotionsNavigationPromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursePromotionsNavigationsPromotionId", "PromotionsNavigationPromotionId");

                    b.HasIndex("PromotionsNavigationPromotionId");

                    b.ToTable("CoursePromotionPromotions", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("GoogleMeetUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Models.Entities.BookingTransaction", b =>
                {
                    b.Property<Guid>("BookingTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingTransactionId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("WalletId");

                    b.ToTable("BookingTransactions");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalSlots")
                        .HasColumnType("int");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseId");

                    b.HasIndex("TutorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Models.Entities.CourseOutline", b =>
                {
                    b.Property<Guid>("CourseOutlineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseOutlineId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseOutlines");
                });

            modelBuilder.Entity("Models.Entities.CoursePromotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PromotionId");

                    b.HasIndex("CourseId");

                    b.ToTable("CoursePromotions");
                });

            modelBuilder.Entity("Models.Entities.Promotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PromotionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Models.Entities.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Models.Entities.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId");

                    b.HasIndex("StudentCourseId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Models.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Models.Entities.StudentCourse", b =>
                {
                    b.Property<Guid>("StudentCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("Models.Entities.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Models.Entities.Tutor", b =>
                {
                    b.Property<Guid>("TutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TutorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("Models.Entities.TutorCertificate", b =>
                {
                    b.Property<Guid>("TutorCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TutorSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TutorCertificateId");

                    b.HasIndex("TutorId");

                    b.HasIndex("TutorSubjectId")
                        .IsUnique();

                    b.ToTable("TutorCertificates");
                });

            modelBuilder.Entity("Models.Entities.TutorRating", b =>
                {
                    b.Property<Guid>("TutorRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RatePoints")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TutorRatingId");

                    b.HasIndex("BookingId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorRatings");
                });

            modelBuilder.Entity("Models.Entities.TutorRatingImage", b =>
                {
                    b.Property<Guid>("TutorRatingImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TutorRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TutorRatingImageId");

                    b.HasIndex("TutorId");

                    b.HasIndex("TutorRatingId");

                    b.ToTable("TutorRatingImages");
                });

            modelBuilder.Entity("Models.Entities.TutorSubject", b =>
                {
                    b.Property<Guid>("TutorSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TutorSubjectId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.HasIndex("TutorId");

                    b.ToTable("TutorSubjects");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BanExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Entities.UserAuthentication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserAuthentications");
                });

            modelBuilder.Entity("Models.Entities.UserBlock", b =>
                {
                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CreateUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("UserBlocks");
                });

            modelBuilder.Entity("Models.Entities.UserFollow", b =>
                {
                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CreateUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("UserFollows");
                });

            modelBuilder.Entity("Models.Entities.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AvalaibleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastBalanceUpdate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PendingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Models.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("WalletTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WalletTransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("CoursePromotionPromotion", b =>
                {
                    b.HasOne("Models.Entities.CoursePromotion", null)
                        .WithMany()
                        .HasForeignKey("CoursePromotionsNavigationsPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionsNavigationPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Booking", b =>
                {
                    b.HasOne("Models.Entities.Student", "StudentNavigation")
                        .WithMany("BookingsNavigation")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Tutor", "TutorNavigation")
                        .WithMany("BookingsNavigation")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudentNavigation");

                    b.Navigation("TutorNavigation");
                });

            modelBuilder.Entity("Models.Entities.BookingTransaction", b =>
                {
                    b.HasOne("Models.Entities.Booking", "BookingNavigation")
                        .WithOne("BookingTransactionNavigation")
                        .HasForeignKey("Models.Entities.BookingTransaction", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Wallet", "WalletNavigation")
                        .WithMany("BookingTransactionsNavigation")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookingNavigation");

                    b.Navigation("WalletNavigation");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.HasOne("Models.Entities.Tutor", "TutorNavigation")
                        .WithMany("CoursesNavigation")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TutorNavigation");
                });

            modelBuilder.Entity("Models.Entities.CourseOutline", b =>
                {
                    b.HasOne("Models.Entities.Course", "CoursesNavigation")
                        .WithMany("CourseOutlinesNavigation")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CoursesNavigation");
                });

            modelBuilder.Entity("Models.Entities.CoursePromotion", b =>
                {
                    b.HasOne("Models.Entities.Course", "CourseNavigation")
                        .WithMany("CoursePromotionsNavigation")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CourseNavigation");
                });

            modelBuilder.Entity("Models.Entities.Report", b =>
                {
                    b.HasOne("Models.Entities.User", "UserNavigation")
                        .WithMany("SenderUserReportNavigation")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Models.Entities.Schedule", b =>
                {
                    b.HasOne("Models.Entities.StudentCourse", "StudentCourseNavigation")
                        .WithMany("SchedulesNavigations")
                        .HasForeignKey("StudentCourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudentCourseNavigation");
                });

            modelBuilder.Entity("Models.Entities.Student", b =>
                {
                    b.HasOne("Models.Entities.User", "UserNavigation")
                        .WithOne("StudentNavigation")
                        .HasForeignKey("Models.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Models.Entities.StudentCourse", b =>
                {
                    b.HasOne("Models.Entities.Course", "CourseNavigation")
                        .WithMany("StudentCoursesNavigation")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Student", "StudentNavigation")
                        .WithMany("StudentCoursesNavigation")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CourseNavigation");

                    b.Navigation("StudentNavigation");
                });

            modelBuilder.Entity("Models.Entities.Tutor", b =>
                {
                    b.HasOne("Models.Entities.User", "UserNavigation")
                        .WithOne("TutorNavigation")
                        .HasForeignKey("Models.Entities.Tutor", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Models.Entities.TutorCertificate", b =>
                {
                    b.HasOne("Models.Entities.Tutor", "TutorNavigation")
                        .WithMany("TutorCertificatesNavigation")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.TutorSubject", "TutorSubjectNavigation")
                        .WithOne("TutorCertificateNavigation")
                        .HasForeignKey("Models.Entities.TutorCertificate", "TutorSubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TutorNavigation");

                    b.Navigation("TutorSubjectNavigation");
                });

            modelBuilder.Entity("Models.Entities.TutorRating", b =>
                {
                    b.HasOne("Models.Entities.Booking", "BookingNavigation")
                        .WithMany("TutorRatingsNavigation")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Student", "StudentNavigation")
                        .WithMany("TutorRatingsNavigation")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Tutor", "TutorNavigation")
                        .WithMany("TutorRatingsNavigation")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookingNavigation");

                    b.Navigation("StudentNavigation");

                    b.Navigation("TutorNavigation");
                });

            modelBuilder.Entity("Models.Entities.TutorRatingImage", b =>
                {
                    b.HasOne("Models.Entities.Tutor", "TutorNavigation")
                        .WithMany("TutorRatingsImagesNavigation")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.TutorRating", "TutorRatingNavigation")
                        .WithMany("TutorRatingImagesNavigation")
                        .HasForeignKey("TutorRatingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TutorNavigation");

                    b.Navigation("TutorRatingNavigation");
                });

            modelBuilder.Entity("Models.Entities.TutorSubject", b =>
                {
                    b.HasOne("Models.Entities.Subject", "SubjectNavigation")
                        .WithOne("TutorSubjectNavigation")
                        .HasForeignKey("Models.Entities.TutorSubject", "SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Tutor", "TutorNavigation")
                        .WithMany("TutorSubjectsNavigation")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SubjectNavigation");

                    b.Navigation("TutorNavigation");
                });

            modelBuilder.Entity("Models.Entities.UserAuthentication", b =>
                {
                    b.HasOne("Models.Entities.User", "UserNavigation")
                        .WithOne("UserAuthenticationNavigation")
                        .HasForeignKey("Models.Entities.UserAuthentication", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Models.Entities.UserBlock", b =>
                {
                    b.HasOne("Models.Entities.User", "CreateUserNavigation")
                        .WithMany("CreateUserBlockNavigation")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", "TargetUserNavigation")
                        .WithMany("TargetUserBlockNavigation")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUserNavigation");

                    b.Navigation("TargetUserNavigation");
                });

            modelBuilder.Entity("Models.Entities.UserFollow", b =>
                {
                    b.HasOne("Models.Entities.User", "CreateUserNavigation")
                        .WithMany("CreateUserFollowNavigation")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", "TargetUserNavigation")
                        .WithMany("TargetUserFollowNavigation")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUserNavigation");

                    b.Navigation("TargetUserNavigation");
                });

            modelBuilder.Entity("Models.Entities.Wallet", b =>
                {
                    b.HasOne("Models.Entities.User", "UserNavigation")
                        .WithOne("WalletNavigation")
                        .HasForeignKey("Models.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Models.Entities.WalletTransaction", b =>
                {
                    b.HasOne("Models.Entities.Wallet", "WalletNavigation")
                        .WithMany("WalletTransactionsNavigation")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WalletNavigation");
                });

            modelBuilder.Entity("Models.Entities.Booking", b =>
                {
                    b.Navigation("BookingTransactionNavigation");

                    b.Navigation("TutorRatingsNavigation");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.Navigation("CourseOutlinesNavigation");

                    b.Navigation("CoursePromotionsNavigation");

                    b.Navigation("StudentCoursesNavigation");
                });

            modelBuilder.Entity("Models.Entities.Student", b =>
                {
                    b.Navigation("BookingsNavigation");

                    b.Navigation("StudentCoursesNavigation");

                    b.Navigation("TutorRatingsNavigation");
                });

            modelBuilder.Entity("Models.Entities.StudentCourse", b =>
                {
                    b.Navigation("SchedulesNavigations");
                });

            modelBuilder.Entity("Models.Entities.Subject", b =>
                {
                    b.Navigation("TutorSubjectNavigation");
                });

            modelBuilder.Entity("Models.Entities.Tutor", b =>
                {
                    b.Navigation("BookingsNavigation");

                    b.Navigation("CoursesNavigation");

                    b.Navigation("TutorCertificatesNavigation");

                    b.Navigation("TutorRatingsImagesNavigation");

                    b.Navigation("TutorRatingsNavigation");

                    b.Navigation("TutorSubjectsNavigation");
                });

            modelBuilder.Entity("Models.Entities.TutorRating", b =>
                {
                    b.Navigation("TutorRatingImagesNavigation");
                });

            modelBuilder.Entity("Models.Entities.TutorSubject", b =>
                {
                    b.Navigation("TutorCertificateNavigation");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("CreateUserBlockNavigation");

                    b.Navigation("CreateUserFollowNavigation");

                    b.Navigation("SenderUserReportNavigation");

                    b.Navigation("StudentNavigation");

                    b.Navigation("TargetUserBlockNavigation");

                    b.Navigation("TargetUserFollowNavigation");

                    b.Navigation("TutorNavigation");

                    b.Navigation("UserAuthenticationNavigation");

                    b.Navigation("WalletNavigation");
                });

            modelBuilder.Entity("Models.Entities.Wallet", b =>
                {
                    b.Navigation("BookingTransactionsNavigation");

                    b.Navigation("WalletTransactionsNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
